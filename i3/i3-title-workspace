#!/usr/bin/perl

BEGIN { $| = 1 } # flush \n

use strict;
use warnings;
use Data::Dumper;
use AnyEvent::I3;
use List::Util qw(first);
use v5.10;

my $i3 = i3();
$i3->connect->recv or die "Error connecting to i3";


my %titles = (
    '^.*[Mm][Oo][Cc].*$' => '5: media',
    '^.*[Vv][Ii][Mm].*$' => '3: edit',
);

sub subscribe {
    my $ev = $_[0];
    my $dump = $_[1];
    if($i3->subscribe({
        $ev => sub {
            my ($msg) = @_;
            #say "$ev:$msg->{'change'}";
            if ($ev eq 'window') {
                if ($msg->{'change'} == 'title') {
                    say "Changed window title, inspecting focus";
                    if ($msg->{'container'}->{'focused'}) {
                        say "Focused, continuing";
                    }
                    else {
                        say "Not focused, not rerouting";
                        return;
                    }
                }
                say "Focused window $msg->{'container'}->{'name'}";
                if ($msg->{'container'}->{'window_properties'}->{'class'} !~ /terminal/i) {
                    say "Window not a terminal, not rerouting based on title.";
                    return;
                }
                my $workspace = first { $msg->{'container'}->{'name'} =~ qr/$_/ } keys(%titles); 
                if ($workspace) {
                    system "i3-msg move window to workspace $titles{$workspace}";
                    system "i3-msg workspace $titles{$workspace}";
                }
                else {
                    say "No match for title $msg->{'container'}->{'name'}";
                }
            }
        }
    })->recv->{success}) {
        say "Successfully subscribed to $ev-event";
    }
}

my @args = ('window');
my $nextArg = shift @args;
if(!$nextArg) {
    say "Subscribe to i3-events";
    say "Usage:   $0 workspace|output|mode|window|barconfig_update|binding [dump]";
    say "Example: $0 workspace dump window binding dump";
    exit 1;
}
while($nextArg) {
    my $arg = $nextArg;
    $nextArg = shift @args;
    my $dump = 0;
    if($nextArg and $nextArg eq "dump") {
        $dump = 1;
        $nextArg = shift @args;
    }
    subscribe("$arg", $dump);
}
AE::cv->recv;
